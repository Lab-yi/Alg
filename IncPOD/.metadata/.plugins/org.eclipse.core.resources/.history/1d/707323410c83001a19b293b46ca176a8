import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;
import java.util.Scanner;

import algorithms.hybrid.Incpod;
import input.Input;
import input.InputIterationException;
import input.OriginPOD;
import input.ParsedColumn;
import input.RelationalInput;
import pod.pointOD.PointOD;
import pod.pointOD.PointODSet;
import predicates.PredicateBuilder;


public class Main{

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		String line ="incpod\\dataset\\SPStock.csv";    
		File file = new File(line);
		String incline ="incpod\\dataset\\SPStock.csv";    
		File incfile = new File(line);
		String line1 ="incpod\\dataset\\sps90k.txt";    
		File od = new File(line1);
		double alpha = 0.4;
		int n=90000;
		int m=20000;
		int size=20000;
		RelationalInput data = new RelationalInput(file);
		
		Input input = new Input(data,n+m);
		System.out.println("data name : claim");
		System.out.println("origin data size : "+n);
		System.out.println("incremental data size : "+m);
		System.out.println("tuples in a single round : "+size);
		PredicateBuilder predicates = new PredicateBuilder(input);
		OriginPOD origin=new OriginPOD(od,input.getColumns());
		 
		System.out.println("total constraints size : "+origin.total.size());

		Incpod incpod = new Incpod();
		System.out.println("------------------ now is Incpod for od -------------------");
		PointODSet dcs = incpod.run(input,predicates,origin,alpha,n,m,size);
		System.out.println("total used time(excluding time for building indexes) : "+ incpod.time+ " ms"); 
		System.out.println("minimal PODs size : "+dcs.size());
	}
}
