package algorithms.hybrid;

import chains.Chains;
import cover.SearchPOD;
import evidenceset.Repair;
import input.Input;
import input.OriginPOD;
import input.ParsedColumn;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

//import com.carrotsearch.sizeof.RamUsageEstimator;

import pod.pointOD.PointOD;
import pod.pointOD.PointODSet;
import predicates.PredicateBuilder;

public class Incpod
{
  public long time;

  public PointODSet run(Input data, PredicateBuilder predicates, OriginPOD origin, double alpha, int n, int m, int size)
    throws Exception
  {
    PointODSet dcsApprox = origin.getod();
    ParsedColumn[] cols = data.getColumns();
    int[][] input = data.getInts();
    Map column = new HashMap();
    for (int i = 0; i < cols.length; ++i) {
      column.put(Integer.valueOf(i), cols[i].getName());
    }
    int columncount = cols.length;
    int[][] input_data = new int[n][columncount + 1];
    int[][] data_all = new int[n + m][columncount + 1];
    int[][] add_data = new int[m][columncount + 1];
    for (int i = 0; i < m + n; ++i) {
      for (int j = 0; j < columncount; ++j) {
        if (i < n) { input_data[i][0] = i; input_data[i][(j + 1)] = input[i][j];
        } else {
          add_data[(i - n)][0] = i;
          add_data[(i - n)][(j + 1)] = input[i][j]; }
        data_all[i][0] = i;
        data_all[i][(j + 1)] = input[i][j];
      }
    }

    Chains chains = new Chains(origin.total.getpod(), input_data, alpha, column, cols);
    System.out.println("Ind(E)£º " + chains.indexes.size());
 //   System.out.println("Data size: "+ RamUsageEstimator.sizeOf(input_data)/(1024*1024)+" MB");
  //  System.out.println("Index size: "+ RamUsageEstimator.sizeOf(chains.indexes)/(1024*1024)+" MB");
    
    Repair repair = new Repair(chains.indexes, chains.column);
    PointODSet dcs = new PointODSet();
    PointODSet refine = new PointODSet();
    Set<String> set1=new HashSet<String>();
    Set<String> set2=new HashSet<String>();
    for (PointOD od : origin.total) {refine.add(od);set1.add(od.toString());set2.add(od.toString());}
   
    
    List<FDcase> FDs = new ArrayList();//for fd case, if a fd LHS have more than two columns
   // for (PointOD od : origin.getfd().getpod()) {FDcase fd = new FDcase(od, column, input_data,FDs);FDs.add(fd);}
    List<UCCcase> UCCs = new ArrayList();// for ucc case
  //  for (PointOD od : origin.getucc().getpod()) { UCCcase ucc = new UCCcase(od, column, input_data);UCCs.add(ucc);}
 //   System.out.println("FD Index size: "+ RamUsageEstimator.sizeOf(FDs)/(1024*1024)+" MB");//index size for fd
  //  System.out.println("UCC Index size: "+ RamUsageEstimator.sizeOf(UCCs)/(1024*1024)+" MB");//index size for ucc 
    long starttime = System.currentTimeMillis();
    for (int i = 0; i < add_data.length / size; i++) {
	     long start=System.currentTimeMillis();
    	int[][] add = new int[size][columncount + 1];
	      for (int index = 0; index < size; ++index) {
	        add[index] = add_data[(i * size + index)];
	      }
	      Set<String> invalid1 = repair.getevidence(data_all, add);
	      Set<String> invalid2 = new HashSet();
	      for (FDcase fd : FDs) {
	        invalid2.addAll(fd.getevidence(data_all, add));
	      }
	      Set<String> invalid3 = new HashSet();
	      for (UCCcase ucc : UCCs) {
	        invalid3.addAll(ucc.getevidence(data_all, add));
	      }
	      invalid2.addAll(invalid3);
	      invalid1.addAll(invalid2);
	    //  if (!(invalid1.isEmpty())) {
	        dcs = new SearchPOD(predicates, refine).getPointODs(invalid1, data_all, column, cols);
	        refine = dcs;
	     // }
        long lasttime = System.currentTimeMillis();
        long time=lasttime-start;
        System.out.println("this is the "+i+" round, use time is "+": "+time);
    }
    refine.minimize();
    long lasttime = System.currentTimeMillis();
    this.time = (lasttime - starttime);//this time is more than real time.
    Set<String> set3=new HashSet<String>();
    for(PointOD od:refine) {
    	set3.add(od.toString());
    }
    set1.removeAll(set3);
    set3.removeAll(set2);
    System.out.println("invalid od size: "+set1.size());
    
    int[][] attr=new int[2][cols.length];
    int max=0;
    int sum=0;
    for(String s:set1) {
    	String[] str=s.split(",");
    	for(int j=0;j<str.length;j++) {
    		for(int i=0;i<cols.length;i++) {
    			if(str[j].contains(cols[i].getName())) attr[0][i]++;
    		}
    	}
    	max=Math.max(max,str.length-2);
    	sum+=str.length-2;
    }
    System.out.println("max: "+max);
    System.out.println("sum: "+(sum+0.0)/set1.size());
    
    System.out.println("new od size: "+set3.size());
    int max1=0;
    int sum1=0;
    for(String s:set3) {
    	String[] str=s.split(",");
    	for(int j=0;j<str.length;j++) {
    		for(int i=0;i<cols.length;i++) {
    			if(str[j].contains(cols[i].getName()))
    				attr[1][i]++;
    		}
    	}
    	max1=Math.max(max1,str.length-2);
    	sum1+=str.length-2;
    }
    System.out.println("max1: "+max1);
    System.out.println("sum1: "+(sum1+0.0)/set3.size());
    
    int max2=0;
    int ave2=0;
    int max3=0;
    int ave3=0;
    for(int i=0;i<attr[0].length;i++) {
    	max2=Math.max(max2,attr[0][i]);
    	max3=Math.max(max3,attr[1][i]);
    	ave2+=attr[0][i];
    	ave3+=attr[1][i];
    }
    System.out.println("max2: "+max2);
    System.out.println("ave2: "+(ave2+0.0)/attr[0].length);
    System.out.println("max3: "+max3);
    System.out.println("ave3: "+(ave3+0.0)/attr[0].length);

    
    System.out.println("now od size: "+refine.size());
    return refine;
  }
}